---
- name: Load values-global.yaml
  ansible.builtin.import_playbook: ./load_values_global.yml

- name: Determine main clustergroup_name
  ansible.builtin.import_playbook: ./determine_main_clustergroup.yml

- name: Manage secrets application
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  vars:
    application_state: present
    application: vault
    yq_file: "{{ pattern_dir }}/values-{{ main_clustergroupname }}.yaml"
    app_found: false
  tasks:
    - name: Get existing applications
      ansible.builtin.command:
        cmd: |
          yq '.clusterGroup.applications' {{ yq_file }}
      register: current_app_list
      changed_when: false

    - name: Set application definition for vault
      ansible.builtin.set_fact:
        app_def:
          name: vault
          namespace: vault
          project: "{{ main_clustergroupname }}"
          chart: hashicorp-vault
          chartVersion: 0.1.*
      when: application == 'vault'

    - name: Set application definition for golang-external-secrets
      ansible.builtin.set_fact:
        app_def:
          name: golang-external-secrets
          namespace: golang-external-secrets
          project: "{{ main_clustergroupname }}"
          chart: golang-external-secrets
          chartVersion: 0.1.*
      when: application == 'golang-external-secrets'

    - name: Note that we found application '{{ application }}' if we did
      ansible.builtin.set_fact:
        app_found: true
      when: application in (current_app_list.stdout | from_yaml)

    - name: Manage application '{{ application }}' to be present
      when: application_state == 'present' and not app_found
      block:
        - name: Add application '{{ application }}'
          ansible.builtin.command: |
            yq -i '.clusterGroup.applications.{{ app_def.name }} = {{ app_def | to_json }}' {{ yq_file }}

    - name: Manage application '{{ application }}' to be absent
      when: application_state == 'absent' and app_found
      block:
        - name: Remove application '{{ application }}'
          ansible.builtin.command: |
            yq -i 'del(.clusterGroup.applications.{{ app_def.name }})' {{ yq_file }}
