---
- name: Is secrets backend already enabled
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "vault secrets list | grep -e '^{{ vault_base_path }}'"
  register: secrets_enabled
  failed_when: false

- name: Create secrets backend kv-v2
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: vault secrets enable -path="{{ vault_base_path }}" kv-v2
  when: secrets_enabled.rc != 0

- name: Is kubernetes backend already enabled
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "vault auth list | grep -e '^{{ vault_hub }}'"
  register: kubernetes_enabled
  failed_when: false

- name: Enable kubernetes backend on hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: "vault auth enable -path={{ vault_hub }} kubernetes"
  when: kubernetes_enabled.rc != 0

- name: Check for external secrets namespace and secret
  no_log: '{{ hide_sensitive_output | default(true) }}'
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ external_secrets_ns }}"
    name: "{{ external_secrets_secret }}"
    api_version: v1
  register: external_secrets_token_data
  failed_when: false

- name: Check for legacy external secrets namespace and secret
  no_log: '{{ hide_sensitive_output | default(true) }}'
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ legacy_external_secrets_ns }}"
    name: "{{ legacy_external_secrets_secret }}"
    api_version: v1
  register: legacy_external_secrets_token_data
  failed_when: false
  when: external_secrets_token_data.resources | length == 0

- name: Set external secrets configuration to use (prefer new over legacy)
  ansible.builtin.set_fact:
    active_external_secrets_ns: "{{ external_secrets_ns if external_secrets_token_data.resources | length > 0 else legacy_external_secrets_ns }}"
    active_external_secrets_sa: "{{ external_secrets_sa if external_secrets_token_data.resources | length > 0 else legacy_external_secrets_sa }}"
    active_external_secrets_secret: "{{ external_secrets_secret if external_secrets_token_data.resources | length > 0 else legacy_external_secrets_secret }}"
    token_data: "{{ external_secrets_token_data if external_secrets_token_data.resources | length > 0 else legacy_external_secrets_token_data }}"

- name: Fail if neither external secrets nor legacy external secrets are found
  ansible.builtin.fail:
    msg: "Neither {{ external_secrets_ns }}/{{ external_secrets_secret }} nor {{ legacy_external_secrets_ns }}/{{ legacy_external_secrets_secret }} secret found"
  when: token_data.resources | length == 0

- name: Set sa_token fact
  no_log: '{{ hide_sensitive_output | default(true) }}'
  ansible.builtin.set_fact:
    sa_token: "{{ token_data.resources[0].data.token | b64decode }}"

- name: Configure hub kubernetes backend
  no_log: '{{ hide_sensitive_output | default(true) }}'
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: bash -e -c "vault write auth/{{ vault_hub }}/config token_reviewer_jwt={{ sa_token }}
        kubernetes_host={{ vault_hub_kubernetes_host }}
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        issuer=https://kubernetes.default.svc"

# This creates a {{ vault_global_policy }} policy that is applied to both hubs and spokes
- name: Configure VP global policy template
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "echo \"path \\\"secret/data/{{ vault_global_policy }}/*\\\" {
        capabilities = {{ vault_global_capabilities }} }\" > /tmp/policy-{{ vault_global_policy }}.hcl"

- name: Configure VP global policy
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: "vault policy write {{ vault_global_policy }}-secret /tmp/policy-{{ vault_global_policy }}.hcl"

- name: Configure VP pushsecrets policy template
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "echo \"path \\\"secret/data/{{ vault_pushsecrets_policy }}/*\\\" {
        capabilities = {{ vault_pushsecrets_capabilities }} }\" > /tmp/policy-{{ vault_pushsecrets_policy }}.hcl"

- name: Add metadata path to the pushsecrets policy
  kubernetes.core.k8s_exec:
      namespace: "{{ vault_ns }}"
      pod: "{{ vault_pod }}"
      command: >
        bash -e -c "echo \"path \\\"secret/metadata/{{ vault_pushsecrets_policy }}/*\\\" {
          capabilities = {{ vault_pushsecrets_capabilities }} }\" >> /tmp/policy-{{ vault_pushsecrets_policy }}.hcl"

- name: Configure VP pushsecrets policy
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: "vault policy write {{ vault_pushsecrets_policy }}-secret /tmp/policy-{{ vault_pushsecrets_policy }}.hcl"

- name: Configure policy template for hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "echo \"path \\\"secret/data/{{ vault_hub }}/*\\\" {
        capabilities = {{ vault_hub_capabilities }} }\" > /tmp/policy-{{ vault_hub }}.hcl"

- name: Configure policy for hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: "vault policy write {{ vault_hub }}-secret /tmp/policy-{{ vault_hub }}.hcl"

- name: Configure kubernetes role for hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      vault write auth/"{{ vault_hub }}"/role/"{{ vault_hub }}"-role
        bound_service_account_names="{{ active_external_secrets_sa }}"
        bound_service_account_namespaces="{{ active_external_secrets_ns }}"
        policies="default,{{ vault_global_policy }}-secret,{{ vault_pushsecrets_policy }}-secret,{{ vault_hub }}-secret" ttl="{{ vault_hub_ttl }}"
