- name: Resolve pattern_install_chart
  ansible.builtin.set_fact:
    pattern_install_chart: >-
      {{
        pattern_install_chart
          | default(lookup("env", "PATTERN_INSTALL_CHART"), true)
          | default("oci://quay.io/validatedpatterns/pattern-install", true)
      }}

- name: Resolve target_branch
  block:
    - name: Seed from CLI/env
      ansible.builtin.set_fact:
        target_branch: >-
          {{
            target_branch
              | default(lookup("env", "TARGET_BRANCH"), true)
              | default("", false)
          }}

    - name: Derive via git (when unset)
      ansible.builtin.command: "git rev-parse --abbrev-ref HEAD"
      args:
        chdir: "{{ pattern_dir }}"
      register: _br
      when: target_branch | trim == ""
      failed_when: false

    - name: Fail if unable to determine target_branch
      ansible.builtin.shell: |
        printf "ERROR\n" > /dev/tty
        printf "    Could not determine target branch in '%s'.\n" "{{ pattern_dir }}" > /dev/tty
        exit 1
      when: (target_branch | trim == "") and (_br.rc != 0 or (_br.stdout | default('') | trim == ""))

    - name: Set from git
      ansible.builtin.set_fact:
        target_branch: "{{ _br.stdout | trim }}"
      when: target_branch | trim == ""

- name: Resolve target_origin
  block:
    - name: Seed from CLI/env
      ansible.builtin.set_fact:
        target_origin: >-
          {{
            target_origin
              | default(lookup("env", "TARGET_ORIGIN"), true)
              | default("", false)
          }}

    - name: Derive via git (when unset)  # noqa: command-instead-of-module
      ansible.builtin.command: "git config branch.{{ target_branch }}.remote"
      args:
        chdir: "{{ pattern_dir }}"
      register: _origin
      when: target_origin | trim == ""
      failed_when: false

    - name: Fail if unable to determine target_origin
      ansible.builtin.shell: |
        printf "ERROR\n" > /dev/tty
        printf "    Could not determine target_origin for branch '%s' in '%s'.\n" "{{ target_branch }}" "{{ pattern_dir }}" > /dev/tty
        printf "    Ensure the branch has a remote configured or pass TARGET_ORIGIN explicitly.\n" > /dev/tty
        exit 1
      when: (target_origin | trim == "") and (_origin.rc != 0 or (_origin.stdout | default('') | trim == ""))

    - name: Set from git
      ansible.builtin.set_fact:
        target_origin: "{{ _origin.stdout | trim }}"
      when: target_origin | trim == ""

- name: Resolve target_clustergroup
  ansible.builtin.set_fact:
    target_clustergroup: >-
      {{
        target_clustergroup
          | default(lookup("env", "TARGET_CLUSTERGROUP"), true)
          | default(main_clustergroup, true)
      }}

- name: Resolve token_secret
  ansible.builtin.set_fact:
    token_secret: >-
      {{
        token_secret
          | default(lookup("env", "TOKEN_SECRET"), true)
          | default("", false)
      }}

- name: Resolve token_namespace
  ansible.builtin.set_fact:
    token_namespace: >-
      {{
        token_namespace
          | default(lookup("env", "TOKEN_NAMESPACE"), true)
          | default("", false)
      }}

- name: Resolve extra_helm_opts
  ansible.builtin.set_fact:
    extra_helm_opts: >-
      {{
        extra_helm_opts
          | default(lookup("env", "EXTRA_HELM_OPTS"), true)
          | default("", false)
      }}

- name: Resolve uuid_helm_opts (from UUID_FILE)
  block:
    - name: Seed UUID file path
      ansible.builtin.set_fact:
        _uuid_file_path: >-
          {{
            uuid_file
              | default(lookup('env','UUID_FILE'), true)
              | default((lookup('env','HOME') | default('')) ~ '/.config/validated-patterns/pattern-uuid', true)
          }}

    - name: Stat UUID file
      ansible.builtin.stat:
        path: "{{ _uuid_file_path }}"
      register: _uuid_stat

    - name: Read UUID (if file exists)
      ansible.builtin.slurp:
        path: "{{ _uuid_file_path }}"
      register: _uuid_slurp
      when: _uuid_stat.stat.exists

    - name: Compute uuid_helm_opts
      ansible.builtin.set_fact:
        uuid_helm_opts: >-
          {{
            '' if not _uuid_stat.stat.exists
            else '--set main.analyticsUUID=' ~ (_uuid_slurp.content | b64decode | trim)
          }}
